1.值类型各顾各的，引用类型一个改变会影响另一个改变，
深入讲就是，引用类型是存到了内存地址，内存地址改变，影响
，引用类型很大，编译器很长时间才能滚动完，所以发在堆中，
基于内存空间和cpu耗时来做的区分。
2.值类型：String(字符串)，Number(数值)，
Boolean(布尔值)，Undefined
3.引用类型：Array(数组)，Object(对象)，Function(函数)
4.typeof：能判断所有值类型，
函数，引用类型:object
强制类型转换：parseInt parseFloat toString
隐式类型转换：if.逻辑运算，拼接字符串
5.null 特殊引用类型，指针指向为空地址，
6.function fn() {}  函数是个可执行代码
//特殊引用类型，但不用于存储数据，所以没有，拷贝，赋值一说
======================================================
typeof //判断所有的值类型，判断函数，能识别引用类型（不能在继续识别）
=======================================================
含义：假设B复制了A，当修改A时，看B是否会发生变化，如果B也跟着变了，
说明这是浅拷贝，拿人手短，如果B没变，那就是深拷贝，自食其力。
============================================
 当进行双等号比较时候： 先检查两个操作数数据类型，
 如果相同， 则进行===比较， 如果不同，
 则愿意为你进行一次类型转换， 转换成相同类型后再进行比较
 ， 而===比较时， 如果类型不同，直接就是false.
 ===========================================
 class:构造函数语法糖
1.每个class都有显示原型prototype
2.每个实例都有隐式_proto_(通过new得到实例)
3.实例的_proto_指向对应class的prototype
A._proto_ === object true
A.prototype_proto_ === object.prototype
======================================
1.闭包有两个作用：
第一个就是可以读取自身函数外部的变量（沿着作用域链寻找）
第二个就是让这些外部变量始终保存在内存中
第三个：闭包隐藏数据，只提供api
2.this对象是在运行时基于函数的执行环境绑定的：
在全局函数中，this等于window，
而当函数被作为某个对象调用时，
this等于那个对象。不过，匿名函数具有全局性，
因此this对象同常指向window
变量的作用域无非就是两种：全局变量和局部变量。
========================
同步和异步：1. ajax图片加载
           2.定时任务：setTimeout
===============================
dom本质，节点操作，结构操作，性能。
===================
性能优化原则:多使用内存，缓存或其他方法
2.减少cpu计算量，减少网络加载耗时
3.空间换时间
让加载更快，1.减少资源体积：压缩代码
2.减少访问次数：合并代码，ssr服务端渲染，缓存
3.使用更快的网络：cdn
===========================
函数声明 function fn() {}
函数表达式 const fn = function(){}
函数声明会在代码执行前预加载，而函数表达式不会
{}等同于  new Object(),原型Object.prototype
object.create(null) 没有原型
object.create({})可指定原型
========================
json是一种数据结构，本质是一段字符串
json格式和js对象结构一致，对js语言更友好
window.JSON是一个全局对象：JSON.stringify.JSON.parse
+++++++++++++++++++++++++++++++++++++++++++++++

